# CAT15 config

topics:
  input:
    lidar: /ouster/pointss
    # imu:   /ouster/imu
    imu: /EL/Sensors/vectornav/IMU
  output:
    state: state  
    frame: full_pcl
  frame_id: global


verbose: true   # print performance board
debug: true     # fill useful intermediate pcl (deskewed, processed ...) 
                # for visualizing purposes

sensors:
  lidar:
    type: 0 # LiDAR type (0: OUSTER \ 1: VELODYNE \ 2: HESAI \ 3: LIVOX)
    end_of_sweep: false # whether the sweep reference time is w.r.t. the
                        # start or the end of the scan (only applies to VELODYNE/OUSTER)
  imu:
    hz: 400

  calibration:  # automatic IMU calibration (if all set to false, no calibration will be done)
    gravity_align: true     # estimate gravity vector
    accel: true             # estimate lin. accel. bias
    gyro: true              # estimate ang. vel. bias
    time: 0.5               # time to estimate (during this time, the 
                           # robot must be at stand still)

  time_offset: true # whether to take into account a possible sync offset
                    # between IMU and LiDAR (set to true if they are not properly in sync)
  TAI_offset: 0.

  extrinsics:
    imu2baselink:
      t: [0.0, 0.0, 0.98 ]  # (x, y, z) [meters]
      R: [0., 0., 0.]        # roll, pitch, yaw [deg]

    lidar2baselink:
      t: [0.006253, -0.011775, 0.98007645] # (x, y, z) [meters]
      R: [0.333483, -0.00, -0.0038787]   # roll, pitch, yaw [deg]
      # R: [1.0000263, 0.4999751, -0.0043634]
    gravity: 9.80304


  intrinsics:
    accel_bias: [ 0.0001, 0.0001, 0.0001 ]  # [m/s^2]
    gyro_bias:  [ 0.0001, 0.0001, 0.001 ]  # [rad/s]
    sm: [ 1.,  0.,  0.,
          0.,  1.,  0.,
          0.,  0.,  1. ]

    # (if your IMU doesn't comply with axis system ISO-8855, 
    # this matrix is meant to map its current orientation with respect
    # to the standard axis system)
    #
    #   Y-pitch
    #   ^   
    #   |  
    #   | 
    #   |
    # Z-yaw o-----------> X-roll

  
filters:
  voxel_grid:
    active: true
    leaf_size: [ .5, .5, .5 ]

  min_distance: # sphere crop
    active: true
    value: 5.5  # [m]

  fov: # crop field of view
    active: true
    value: 180  # [deg]
  
  rate_sampling: # quick downsample
    active: true
    value: 2


IKFoM:  # Iterative Kalman Filter on Manifolds lib
  query_iters: 3 # number of iterations doing KNN from max iterations 
  max_iters: 20  # max num of iterations of the IESEKF
  tolerance: 0.0001                      
  estimate_extrinsics: false
  lidar_noise: 0.001

  covariance:
    gyro: 6.01e-4        # [m^2/s^2]
    accel: 1.53e-2       # [rad^2]
    bias_gyro: 1.54e-5   # [m^2/s^2 * sqrt(s)]
    bias_accel: 3.38e-4  # [rad/s * sqrt(s)]
  
  plane:                     # plane features for point to plane ICP
    points: 5                # num of points that constitute a plane
    max_sqrt_dist: 2.0       # [m] if a neighor exceeds is too far the plane is not valid
    plane_threshold: 5.0e-2  # [m] max distance from point to plane to be 
                             # considered a valid plane 
    

iOctree:
  order: false
  min_extent: 0.2
  bucket_size: 2
  downsample: true